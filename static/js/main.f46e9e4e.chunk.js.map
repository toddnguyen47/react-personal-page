{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/Home.js","components/pages/About.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","backgroundColor","padding","borderBottom","getLineThrough","textDecoration","props","todoElem","completed","this","id","title","style","type","onChange","markComplete","bind","checked","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todos","state","todos","map","key","AddTodo","email","evt","setState","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","React","Home","toggleComplete","todo","axios","delete","then","res","filter","post","data","get","About","linkStyle","headerStyle","background","textAlign","Header","to","exact","path","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f46e9e4e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  getStyle = () => {\n    return {\n      backgroundColor: \"#f4f4f4\",\n      padding: '10px',\n      borderBottom: '1px #ccc dotted',\n    }\n  }\n\n  getLineThrough = () => {\n    return {\n      textDecoration: this.props.todoElem.completed ?\n      'line-through' : 'none'\n    }\n  }\n\n  render() {\n    // Destructuring\n    const { id, title } = this.props.todoElem;\n\n    return (\n      // Double braces\n      // <div style={{ backgroundColor: \"#f4f4f4\" }}>\n\n      // Single braces\n      <div style={ this.getStyle() }>\n        <p>\n          <input\n            type=\"checkbox\"\n            onChange={ this.props.markComplete.bind(this, id) }\n            checked={this.props.todoElem.completed}\n          />\n          {' '}\n          <span style= {this.getLineThrough()}>\n            {title}\n          </span>\n          <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\n        </p>\n      </div>\n    )\n  }\n}\n\nconst btnStyle = {\n  backgroundColor: \"#ff0000\",\n  color: \"#fff\",\n  border: \"none\",\n  borderRadius: \"50%\",\n  padding: \"5px 10px\",\n  cursor: \"pointer\",\n  float: \"right\"\n}\n\n// Prop Types\nTodoItem.propTypes = {\n  todoElem: PropTypes.object.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired\n}\n\nexport default TodoItem;\n\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\n/** Ref: https://www.youtube.com/watch?v=sBws8MSXN7A*/\nclass Todos extends Component {\n  state = {\n\n  }\n\n  render() {\n    return this.props.todos.map( (todoElem) => (\n      <TodoItem key={ todoElem.id } todoElem={ todoElem }\n      markComplete={ this.props.markComplete }\n      delTodo={this.props.delTodo}/>\n    ));\n  }\n}\n\n// Prop Types\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired\n}\n\nexport default Todos;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nclass AddTodo extends React.Component {\n  state = {\n    title: \"\",\n    email: \"\"\n  }\n\n  onChange = (evt) => {\n    // State is in THIS component\n    // Set the title to whatever we type in\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  onSubmit = (evt) => {\n    evt.preventDefault();\n    this.props.addTodo(this.state.title);\n    this.setState({ title: ''}); \n  }\n\n  render() {\n    return (\n      <form style={{ display: \"flex\" }} onSubmit={this.onSubmit}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          style={{ flex: \"10\", padding: \"5px\" }}\n          placeholder=\"Add Todo...\"\n          value={this.state.title}\n          onChange={this.onChange}\n        />\n        <input\n          type=\"submit\"\n          value=\"Submit\"\n          className=\"btn\"\n          style={{ flex: \"1\" }}\n        />\n\n        {/* <input\n         type=\"text\"\n         name=\"email\"\n         value={this.state.email}\n         onChange={this.onChange}\n         /> */}\n      </form>\n    );\n  }\n}\n\n// Prop Types\nAddTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired\n}\n\nexport default AddTodo;\n","import React, { Component } from 'react';\nimport Todos from '../Todos';\nimport AddTodo from '../AddTodo';\nimport axios from 'axios';\n// import uuid from 'uuid';\nimport '../../App.css';\n\n/** Ref: https://www.youtube.com/watch?v=sBws8MSXN7A*/\nclass Home extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  state = {\n    todos: [\n\n    ]\n  }\n\n  componentDidMount() {\n    axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n      .then(res => this.setState({todos: res.data}));\n  }\n\n  toggleComplete = (id) => {\n    // Iterate through all todo elements\n    this.setState({ todos: this.state.todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    })});\n  }\n\n  delTodo = (id) => {\n    axios.delete(\"https://jsonplaceholder.typicode.com/todos/${id}\")\n      .then(res => \n        // Filter out any IDs that does not match the passed in ID\n        // Then, set the state with the remaining IDs\n        this.setState(\n          {todos: [...this.state.todos.filter(todoElem => \n            todoElem.id != id\n          )]}\n        )\n      );\n  }\n\n  // Add Todo\n  addTodo = (title) => {\n    axios.post(\n      \"https://jsonplaceholder.typicode.com/todos\",\n      {\n        title: title,\n        completed: false\n      }\n    )\n      .then(res => this.setState({\n          todos: [...this.state.todos, res.data]\n        })\n      );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <AddTodo addTodo={this.addTodo} />\n          <Todos\n            todos={this.state.todos}\n            markComplete={ this.toggleComplete }\n            delTodo={this.delTodo}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react'\n\nfunction About() {\n  return (\n    <div className=\"container\">\n      <h1>About</h1>\n      <p>This is the TodoList app v1.0.0. It is part of a React crash course.</p>\n    </div>\n  )\n}\n\nexport default About;\n","import React from 'react';\nimport {Link, BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Home from \"../pages/Home\"\nimport About from '../pages/About';\n\nfunction Header() {\n  return (\n    <Router>\n      <header style={headerStyle}>\n        <h1>TodoList</h1>\n        <Link style={linkStyle} to=\"/react_page\">Home</Link>\n        |\n        <Link style={linkStyle} to=\"/react_page/about\">About</Link>\n      </header>\n\n      <Switch>\n        <Route exact path=\"/react_page\">\n          <Home />\n        </Route>\n\n        <Route path=\"/react_page/about\">\n          <About />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\n// Can also use className and put styles in App.css\nconst linkStyle = {\n  color: \"#fff\",\n  textDecoration: 'none'\n}\n\nconst headerStyle = {\n  background: \"#333\",\n  color: \"#fff\",\n  textAlign: \"center\",\n  padding: \"10px\"\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n// import uuid from 'uuid';\nimport './App.css';\nimport Header from './components/layout/Header';\n\n/** Ref: https://www.youtube.com/watch?v=sBws8MSXN7A*/\nclass App extends Component {\n  render() {\n    return (\n      // Note that we can also use empty brackets <>\n      // Ref: https://reactjs.org/docs/fragments.html#short-syntax\n      <React.Fragment>\n        <Header />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Load the App.js component to 'root'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
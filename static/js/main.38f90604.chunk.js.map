{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","Header","style","TodoItem","getStyle","backgroundColor","borderBottom","textDecoration","props","todoElem","completed","this","id","title","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","border","borderRadius","cursor","float","Todos","state","todos","map","key","AddTodo","evt","setState","display","name","flex","placeholder","value","className","React","App","toggleComplete","todo","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAUA,IAAMA,EAAc,CAClBC,WAAY,OACZC,MAAO,OACPC,UAAW,SACXC,QAAS,QAGIC,EAff,WACE,OACE,4BAAQC,MAAON,GACb,0CCFOO,EAAb,2MACEC,SAAW,WACT,MAAO,CACLC,gBAAiB,UACjBL,QAAS,OACTM,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,SAASC,UAClC,eAAiB,SAPzB,wEAWW,MAEeC,KAAKH,MAAMC,SAAzBG,EAFD,EAECA,GAFD,EAEKC,MAEZ,OAKE,yBAAKX,MAAQS,KAAKP,YAChB,2BACE,2BAAOU,KAAK,WACZC,SAAWJ,KAAKH,MAAMQ,aAAaC,KAAKN,KAAMC,KAFhD,IAE0D,IACtDD,KAAKH,MAAMC,SAASI,MACtB,4BAAQX,MAAOgB,EAAUC,QAASR,KAAKH,MAAMY,QAAQH,KAAKN,KAAMC,IAAhE,WAzBV,GAA8BS,aAgCxBH,EAAW,CACfb,gBAAiB,UACjBP,MAAO,OACPwB,OAAQ,OACRC,aAAc,MACdvB,QAAS,WACTwB,OAAQ,UACRC,MAAO,SAQMtB,IC1BAuB,E,2MAlBbC,MAAQ,G,wEAIE,IAAD,OACP,OAAOhB,KAAKH,MAAMoB,MAAMC,KAAK,SAACpB,GAAD,OAC3B,kBAAC,EAAD,CAAUqB,IAAMrB,EAASG,GAAKH,SAAWA,EACzCO,aAAe,EAAKR,MAAMQ,aAC1BI,QAAS,EAAKZ,MAAMY,iB,GATNC,aC6BLU,E,2MA/BbJ,MAAQ,CACNd,MAAO,I,EAGTE,SAAW,SAACiB,GAEV,EAAKC,Y,wEAIL,OACE,0BAAM/B,MAAO,CAAEgC,QAAS,SACtB,2BACEpB,KAAK,OACLqB,KAAK,QACLjC,MAAO,CAAEkC,KAAM,KAAMpC,QAAS,OAC9BqC,YAAY,cACZC,MAAO3B,KAAKgB,MAAMd,MAClBE,SAAUJ,KAAKI,WAEjB,2BACED,KAAK,SACLwB,MAAM,SACNC,UAAU,MACVrC,MAAO,CAAEkC,KAAM,Y,GAzBHI,IAAMnB,WC+DboB,G,iNArDbd,MAAQ,CACNC,MAAO,CACL,CACEhB,GAAI,EACJC,MAAO,qBACPH,WAAW,GAEb,CACEE,GAAI,EACJC,MAAO,oBACPH,WAAW,GAEb,CACEE,GAAI,EACJC,MAAO,iBACPH,WAAW,K,EAKjBgC,eAAiB,SAAC9B,GAEhB,EAAKqB,SAAS,CAAEL,MAAO,EAAKD,MAAMC,MAAMC,KAAI,SAAAc,GAI1C,OAHIA,EAAK/B,KAAOA,IACd+B,EAAKjC,WAAaiC,EAAKjC,WAElBiC,Q,EAIXvB,QAAU,SAACR,GAGT,EAAKqB,SACH,CAACL,MAAM,YAAK,EAAKD,MAAMC,MAAMgB,QAAO,SAAAnC,GAAQ,OAC1CA,EAASG,IAAMA,S,wEAKnB,OACE,yBAAK2B,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOX,MAAOjB,KAAKgB,MAAMC,MAAOZ,aAAeL,KAAK+B,eACpDtB,QAAST,KAAKS,gB,GAnDNC,cCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.38f90604.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <header style={headerStyle}>\n      <h1>TodoList</h1>\n    </header>\n  )\n}\n\nconst headerStyle = {\n  background: \"#333\",\n  color: \"#fff\",\n  textAlign: \"center\",\n  padding: \"10px\"\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  getStyle = () => {\n    return {\n      backgroundColor: \"#f4f4f4\",\n      padding: '10px',\n      borderBottom: '1px #ccc dotted',\n      textDecoration: this.props.todoElem.completed ?\n        'line-through' : 'none'\n    }\n  }\n\n  render() {\n    // Destructuring\n    const { id, title } = this.props.todoElem;\n\n    return (\n      // Double braces\n      // <div style={{ backgroundColor: \"#f4f4f4\" }}>\n\n      // Single braces\n      <div style={ this.getStyle() }>\n        <p>\n          <input type=\"checkbox\"\n          onChange={ this.props.markComplete.bind(this, id) } /> {' '}\n          { this.props.todoElem.title }\n          <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\n        </p>\n      </div>\n    )\n  }\n}\n\nconst btnStyle = {\n  backgroundColor: \"#ff0000\",\n  color: \"#fff\",\n  border: \"none\",\n  borderRadius: \"50%\",\n  padding: \"5px 10px\",\n  cursor: \"pointer\",\n  float: \"right\"\n}\n\n// Prop Types\nTodoItem.propTypes = {\n  todoElem: PropTypes.object.isRequired\n}\n\nexport default TodoItem;\n\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\n/** Ref: https://www.youtube.com/watch?v=sBws8MSXN7A*/\nclass Todos extends Component {\n  state = {\n\n  }\n\n  render() {\n    return this.props.todos.map( (todoElem) => (\n      <TodoItem key={ todoElem.id } todoElem={ todoElem }\n      markComplete={ this.props.markComplete }\n      delTodo={this.props.delTodo}/>\n    ));\n  }\n}\n\n// Prop Types\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired\n}\n\nexport default Todos;\n","import React from \"react\";\n\nclass AddTodo extends React.Component {\n  state = {\n    title: \"\"\n  }\n\n  onChange = (evt) => {\n    // State is in THIS component\n    this.setState();\n  }\n\n  render() {\n    return (\n      <form style={{ display: \"flex\" }}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          style={{ flex: \"10\", padding: \"5px\" }}\n          placeholder=\"Add Todo...\"\n          value={this.state.title}\n          onChange={this.onChange}\n        />\n        <input\n          type=\"submit\"\n          value=\"Submit\"\n          className=\"btn\"\n          style={{ flex: \"1\" }}\n        />\n      </form>\n    );\n  }\n}\n\nexport default AddTodo;\n","import React, { Component } from 'react';\nimport Header from \"./components/layout/Header\";\nimport Todos from './components/Todos'\nimport AddTodo from \"./components/AddTodo\"\nimport './App.css';\n\n/** Ref: https://www.youtube.com/watch?v=sBws8MSXN7A*/\nclass App extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  state = {\n    todos: [\n      {\n        id: 1,\n        title: \"Take out the trash\",\n        completed: false\n      },\n      {\n        id: 2,\n        title: \"Dinner with frens\",\n        completed: true\n      },\n      {\n        id: 3,\n        title: \"Meet with boss\",\n        completed: false\n      },\n    ]\n  }\n\n  toggleComplete = (id) => {\n    // Iterate through all todo elements\n    this.setState({ todos: this.state.todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    })});\n  }\n\n  delTodo = (id) => {\n    // Filter out any IDs that does not match the passed in ID\n    // Then, set the state with the remaining IDs\n    this.setState(\n      {todos: [...this.state.todos.filter(todoElem => \n        todoElem.id != id\n      )]});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <AddTodo />\n          <Todos todos={this.state.todos} markComplete={ this.toggleComplete }\n          delTodo={this.delTodo}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Load the App.js component to 'root'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}